// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  phone                 String?
  twoFactorConfirmation TwoFactorConfirmation?
  projects              Project[]
  alerts                Alerts[]
}

model Alerts {
  id         String   @id @default(cuid())
  date       DateTime
  receipt_id Int
  userId     String
  type       String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  read       Boolean  @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  id           Int       @id @default(autoincrement())
  name         String
  asset_amount Float?
  created_at   DateTime
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  receipts     Receipt[]
}

model Receipt {
  id                Int      @id @default(autoincrement())
  type              String
  store             String
  card              String?
  tracking_number   String?
  purchase_date     DateTime
  days_until_return Int
  return_date       DateTime
  receipt_image_url String?
  receipt_image_key String?
  items             Items[]
  memo              Boolean
  created_at        DateTime
  expired           Boolean  @default(false)
  project_id        Int
  project           Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model Items {
  id          Int      @id @default(autoincrement())
  description String
  photo_url   String?
  photo_key   String?
  price       Float
  barcode     String?
  character   String?
  product_id  String?
  receipt_id  Int
  receipt     Receipt  @relation(fields: [receipt_id], references: [id], onDelete: Cascade)
  created_at  DateTime
  returned    Boolean  @default(false)
}
